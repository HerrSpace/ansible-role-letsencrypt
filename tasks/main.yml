---
# Create Keys, CSRs, signing script and systemd service/timer which keep SSL Certs updated.
- name: Install git
  package: name=git state=present

- name: Add group ssl-cert
  group: name=ssl-cert system=yes state=present

- name: Add user letsencrypt
  user: name=letsencrypt system=yes group=ssl-cert state=present home={{ letsencrypt_install_dir }} shell=/bin/bash

- name: Let letsencrypt user reload nginx
  lineinfile: dest=/etc/sudoers line="letsencrypt ALL = NOPASSWD{{':'}} /bin/systemctl reload nginx"

- name: Manage cert and acme webroot directory
  file: path={{ item }} state=directory owner=letsencrypt group=ssl-cert mode=750
  with_items:
    - "{{ letsencrypt_cert_dir }}"
    - "{{ letsencrypt_webroot_dir }}"
    - "{{ letsencrypt_install_dir }}"

- name: Get letsencrypt intermediate certificate
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
    dest: "{{ letsencrypt_cert_dir }}intermediate.pem"
    checksum: sha256:e446c5e9dbef9d09ac9f7027c034602492437a05ff6c40011d7235fca639c79a
    owner: letsencrypt
    group: ssl-cert
    mode: 0640

- name: Get acme-tiny
  become: yes
  become_user: letsencrypt
  git: repo=https://github.com/frezbo/acme-tiny dest={{ letsencrypt_install_dir }}acme-tiny/

- name: Generate letsencrypt account key
  become: yes
  become_user: letsencrypt
  shell: "umask 137; openssl genrsa -out {{ letsencrypt_cert_dir }}account.key 4096"
  args:
    creates: "{{ letsencrypt_cert_dir }}account.key"

- name: Generate domain keys
  become: yes
  become_user: letsencrypt
  shell: "umask 137; openssl ecparam -name secp384r1 -genkey -out {{ letsencrypt_cert_dir }}domain.{{ item.key }}.key"
  args:
    creates: "{{ letsencrypt_cert_dir }}domain.{{ item.key }}.key"
  with_dict: "{{ letsencrypt_cert_domains }}"

# x509v3 and therefore letsencrypt doesn't support subjectAltNames in the subject line.
# We need to generate the openssl.conf, since there is no openssl req command line switch
# for the new x509v3 style SAN list.
- name: Generate openssl.conf files for each CSR
  become: yes
  become_user: letsencrypt
  template:
    src: openssl.conf.j2
    dest: "{{ letsencrypt_cert_dir }}domain.{{ item.key }}.openssl.conf"
    owner: letsencrypt
    group: ssl-cert
    mode: 0640
  with_dict: "{{ letsencrypt_cert_domains }}"
  register: osslconf_tmpl

# They need to be removed, so the renew_cert.sh recreates them using the new CSRs.
- name: Remove obsolete SSL Keys.
  shell: >
    rm {{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.csr;
    rm {{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.pem;
    rm {{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.chained.pem;
  ignore_errors: True
  changed_when: True
  when: "{{ item.changed }}"
  with_items: "{{ osslconf_tmpl.results }}"
  # TODO: just ls -l and remove using the file module

- name: Generate CSRs
  become: yes
  become_user: letsencrypt
  command: "openssl req -batch -subj '/' -config {{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.openssl.conf -new -key {{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.key -out {{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.csr"
  args:
    creates: "{{ letsencrypt_cert_dir }}domain.{{ item.item.key }}.csr"
  when: "{{ item.changed }}"
  with_items: "{{ osslconf_tmpl.results }}"

- name: Manage renew_cert.sh
  template: src=renew_cert.sh.j2 dest={{ letsencrypt_install_dir }}renew_cert.sh owner=letsencrypt group=ssl-cert mode=750

- name: Manage letsencrypt.service
  template: src=letsencrypt.service.j2 dest=/etc/systemd/system/letsencrypt.service owner=root group=root mode=644
  register: service_res

- name: Copy letsencrypt.timer
  copy: src=letsencrypt.timer dest=/etc/systemd/system/letsencrypt.timer owner=root group=root mode=644
  register: timer_res

- name: Reload systemd units
  command: systemctl daemon-reload
  when: service_res.changed or timer_res.changed

- name: Start and enable letsencrypt.timer
  service: name=letsencrypt.timer enabled=yes state=started

- name: Force run the service now
  service: name=letsencrypt.service state=started
  changed_when: False
